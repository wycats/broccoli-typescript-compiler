{"version":3,"file":"index.cjs.js","sources":["../src/fs/path-utils.ts","../src/compiler/create-parse-config-host.ts","../src/compiler/config-parser.ts","../src/compiler/create-compiler-host.ts","../src/cache.ts","../src/fs/file-utils.ts","../src/cache/directory-entries-cache-delegate.ts","../src/cache/directory-entries-cache.ts","../src/compiler/input-io.ts","../src/helpers.ts","../src/compiler/output-patcher.ts","../src/fs/parse-path.ts","../src/cache/path-info-cache-delegate.ts","../src/cache/path-info-cache.ts","../src/fs/resolve.ts","../src/cache/resolution-cache-delegate.ts","../src/cache/resolution-cache.ts","../src/compiler/path-resolver.ts","../src/compiler/source-cache.ts","../src/compiler.ts","../src/diagnostics-handler.ts","../src/normalize-options.ts","../src/plugin.ts","../src/compat/filter.ts"],"sourcesContent":["import * as ts from \"typescript\";\nimport { AbsolutePath, CanonicalPath } from \"../interfaces\";\n\nconst enum CharCode {\n  Slash = 47,\n}\n\nexport const useCaseSensitiveFileNames = ts.sys.useCaseSensitiveFileNames;\nexport const getCanonicalFileName = ts.sys.useCaseSensitiveFileNames\n  ? (fileName: string) => fileName\n  : (fileName: string) => fileName.toLowerCase();\n\nexport const defaultLibLocation = ts.getDirectoryPath(\n  toCanonicalPath(ts.sys.getExecutingFilePath())\n);\n\nexport function normalizePath(path: string) {\n  if (path.length === 0) {\n    return path;\n  }\n  return trimTrailingSlash(ts.normalizePath(path));\n}\n\nexport function isWithin(rootPath: AbsolutePath, path: AbsolutePath) {\n  return (\n    path.length > rootPath.length &&\n    path.lastIndexOf(rootPath, 0) === 0 &&\n    path.charCodeAt(rootPath.length) === CharCode.Slash\n  );\n}\n\nexport function relativePathWithin(\n  root: AbsolutePath,\n  path: AbsolutePath\n): string | undefined {\n  let relativePath: string | undefined;\n  if (\n    path.length > root.length &&\n    path.lastIndexOf(root, 0) === 0 &&\n    path.charCodeAt(root.length) === CharCode.Slash\n  ) {\n    relativePath = path.substring(root.length + 1);\n  } else if (path === root) {\n    relativePath = \"\";\n  }\n  return relativePath;\n}\n\nexport function toCanonicalPath(\n  fileName: string,\n  basePath?: AbsolutePath | CanonicalPath\n): CanonicalPath {\n  const p = ts.toPath(\n    fileName,\n    basePath === undefined ? currentDirectory() : basePath,\n    getCanonicalFileName\n  );\n  return trimTrailingSlash(p);\n}\n\nexport function toAbsolutePath(\n  fileName: string,\n  basePath?: AbsolutePath\n): AbsolutePath {\n  const p = ts.toPath(\n    fileName,\n    basePath === undefined ? currentDirectory() : basePath,\n    name => name\n  );\n\n  return (trimTrailingSlash(p) as string) as AbsolutePath;\n}\n\nexport { getDirectoryPath } from \"typescript\";\n\nfunction trimTrailingSlash(path: CanonicalPath): CanonicalPath;\nfunction trimTrailingSlash(path: AbsolutePath): AbsolutePath;\nfunction trimTrailingSlash(path: string): string;\nfunction trimTrailingSlash(path: string) {\n  if (path.charCodeAt(path.length - 1) === CharCode.Slash) {\n    return path.slice(0, path.length - 1);\n  }\n  return path;\n}\n\nfunction currentDirectory() {\n  return normalizePath(process.cwd()) as CanonicalPath;\n}\n\n// tslint:disable\ndeclare module \"typescript\" {\n  export function getDirectoryPath(path: ts.Path): ts.Path;\n  export function getDirectoryPath(path: string): string;\n\n  export function normalizePath(path: string): string;\n  export function toPath(\n    fileName: string,\n    basePath: string,\n    getCanonicalFileName: (path: string) => string\n  ): ts.Path;\n}\n","import { matchFiles, ParseConfigHost } from \"typescript\";\nimport { useCaseSensitiveFileNames } from \"../fs/path-utils\";\nimport { AbsolutePath } from \"../interfaces\";\nimport InputIO from \"./input-io\";\n\nexport default function createParseConfigHost(\n  workingPath: AbsolutePath,\n  input: InputIO\n): ParseConfigHost {\n  function getFileSystemEntries(path: string) {\n    return input.getFileSystemEntries(path);\n  }\n\n  function realpath(path: string): string  {\n    try {\n      return input.realpath(path) || path;\n    } catch {\n      return path;\n    }\n  }\n\n  function readDirectory(\n    rootDir: string,\n    extensions: ReadonlyArray<string>,\n    excludes: ReadonlyArray<string>,\n    includes: ReadonlyArray<string>,\n    depth?: number\n  ): string[] {\n    return matchFiles(\n      rootDir,\n      extensions,\n      excludes,\n      includes,\n      useCaseSensitiveFileNames,\n      workingPath,\n      depth,\n      getFileSystemEntries,\n      realpath\n    );\n  }\n\n  function fileExists(path: string): boolean {\n    return input.fileExists(path);\n  }\n\n  function readFile(path: string): string {\n    return input.readFile(path) as string;\n  }\n\n  return {\n    fileExists,\n    readDirectory,\n    readFile,\n    useCaseSensitiveFileNames,\n  };\n}\n\n// tslint:disable\ndeclare module \"typescript\" {\n  export interface FileSystemEntries {\n    files: ReadonlyArray<string>;\n    directories: ReadonlyArray<string>;\n  }\n  export function matchFiles(\n    path: string,\n    extensions: ReadonlyArray<string>,\n    excludes: ReadonlyArray<string>,\n    includes: ReadonlyArray<string>,\n    useCaseSensitiveFileNames: boolean,\n    currentDirectory: string,\n    depth: number | undefined,\n    getFileSystemEntries: (path: string) => FileSystemEntries,\n    realpath: (path: string) => string,\n  ): string[];\n}\n","import * as ts from \"typescript\";\nimport { getDirectoryPath } from \"../fs/path-utils\";\nimport {\n  AbsolutePath,\n  CompilerOptionsConfig,\n  TypescriptConfig,\n} from \"../interfaces\";\nimport createParseConfigHost from \"./create-parse-config-host\";\nimport Input from \"./input-io\";\n\nexport default class ConfigParser {\n  private host: ts.ParseConfigHost;\n\n  constructor(\n    private projectPath: AbsolutePath,\n    private rawConfig: TypescriptConfig | undefined,\n    private configFileName: string | undefined,\n    private compilerOptions: CompilerOptionsConfig | undefined,\n    workingPath: AbsolutePath,\n    input: Input\n  ) {\n    this.host = createParseConfigHost(workingPath, input);\n  }\n\n  public parseConfig(): ts.ParsedCommandLine {\n    const configFileName = this.resolveConfigFileName();\n    const basePath = this.getBasePath(configFileName);\n    const existingOptions = this.convertExistingOptions(basePath);\n\n    const result = this.parseConfigContent(\n      configFileName,\n      basePath,\n      existingOptions.options\n    );\n\n    if (existingOptions.errors.length > 0) {\n      result.errors = existingOptions.errors.concat(result.errors);\n    }\n\n    if (result.options.noEmit === true) {\n      result.options.noEmit = false;\n    }\n\n    return result;\n  }\n\n  private resolveConfigFileName(): AbsolutePath | undefined {\n    if (this.rawConfig !== undefined) {\n      return;\n    }\n    return ts.findConfigFile(\n      this.projectPath,\n      this.host.fileExists,\n      this.configFileName\n    ) as AbsolutePath;\n  }\n\n  private getBasePath(configFilePath: AbsolutePath | undefined): AbsolutePath {\n    if (configFilePath === undefined) {\n      return this.projectPath;\n    }\n    return getDirectoryPath(configFilePath) as AbsolutePath;\n  }\n\n  private convertExistingOptions(basePath: AbsolutePath) {\n    const { compilerOptions } = this;\n    if (compilerOptions === undefined) {\n      return {\n        errors: [] as ts.Diagnostic[],\n        options: undefined,\n      };\n    }\n    return ts.convertCompilerOptionsFromJson(this.compilerOptions, basePath);\n  }\n\n  private readConfigSourceFile(\n    configFilePath: AbsolutePath | undefined\n  ): ts.JsonSourceFile | undefined {\n    if (configFilePath === undefined) {\n      return;\n    }\n    const configFileText = this.host.readFile(configFilePath);\n    if (configFileText === undefined) {\n      throw new Error(`File '${configFilePath}' not found.`);\n    }\n    return ts.parseJsonText(configFilePath, configFileText);\n  }\n\n  private parseConfigContent(\n    configFileName: AbsolutePath | undefined,\n    basePath: AbsolutePath,\n    existingOptions: ts.CompilerOptions | undefined\n  ) {\n    const configSourceFile = this.readConfigSourceFile(configFileName);\n    if (configSourceFile === undefined) {\n      return ts.parseJsonConfigFileContent(\n        this.rawConfig || {},\n        this.host,\n        basePath,\n        existingOptions\n      );\n    }\n    return ts.parseJsonSourceFileConfigFileContent(\n      configSourceFile,\n      this.host,\n      basePath,\n      existingOptions,\n      configFileName\n    );\n  }\n}\n","import {\n  CompilerHost,\n  CompilerOptions,\n  getDefaultLibFileName,\n  NewLineKind,\n  SourceFile,\n  sys,\n} from \"typescript\";\nimport {\n  defaultLibLocation,\n  getCanonicalFileName,\n  toCanonicalPath,\n  useCaseSensitiveFileNames,\n} from \"../fs/path-utils\";\nimport { AbsolutePath } from \"../interfaces\";\nimport InputIO from \"./input-io\";\nimport SourceCache from \"./source-cache\";\n\nexport default function createCompilerHost(\n  workingPath: AbsolutePath,\n  input: InputIO,\n  sourceCache: SourceCache,\n  compilerOptions: CompilerOptions\n): CompilerHost {\n  const newLine = getNewLine(compilerOptions);\n  return {\n    directoryExists: path => input.directoryExists(path),\n    fileExists: path => input.fileExists(path),\n    getCanonicalFileName,\n    getCurrentDirectory: () => workingPath,\n    getDefaultLibFileName: options =>\n      toCanonicalPath(getDefaultLibFileName(options), defaultLibLocation),\n    getDefaultLibLocation: () => defaultLibLocation,\n    getDirectories: path => input.getDirectories(path),\n    getNewLine: () => newLine,\n    getSourceFile: fileName =>\n      sourceCache.getSourceFile(fileName) as SourceFile,\n    getSourceFileByPath: (fileName, path) =>\n      sourceCache.getSourceFileByPath(fileName, path) as SourceFile,\n    readFile: path => input.readFile(path) as string,\n    realpath: path => input.realpath(path) as string,\n    trace: s => sys.write(s + newLine),\n    useCaseSensitiveFileNames: () => useCaseSensitiveFileNames,\n    writeFile: () => {\n      // we provide a write file on emit.\n      throw new Error(\"compiler host does not write output\");\n    },\n  };\n}\n\nfunction getNewLine(options: CompilerOptions): string {\n  let newLine;\n  if (options.newLine === undefined) {\n    newLine = sys.newLine;\n  } else {\n    newLine = options.newLine === NewLineKind.LineFeed ? \"\\n\" : \"\\r\\n\";\n  }\n  return newLine;\n}\n","import { CacheDelegate } from \"./interfaces\";\n\nexport default class Cache<K, CK, V> {\n  public hits = 0;\n  public misses = 0;\n  private store = new Map<CK, V>();\n  constructor(private delegate: CacheDelegate<K, CK, V>) {}\n\n  public get(key: K): V {\n    const cacheKey = this.delegate.cacheKey(key);\n    let value = this.store.get(cacheKey);\n    if (value === undefined) {\n      this.misses++;\n      value = this.delegate.create(key);\n      this.store.set(cacheKey, value);\n    } else {\n      this.hits++;\n    }\n    return value;\n  }\n\n  public clear() {\n    this.store.clear();\n  }\n}\n","import { createHash } from \"crypto\";\nimport { readdirSync, readFileSync, Stats, statSync } from \"fs\";\nimport {\n  AbsolutePath,\n  CanonicalPath,\n  DirEntries,\n  FileContent,\n  PathResolver,\n  Resolution,\n} from \"../interfaces\";\n\nexport function readFile(path: AbsolutePath): FileContent {\n  const buffer = readFileSync(path);\n  const hash = createHash(\"sha1\");\n  hash.update(buffer);\n  return { buffer, version: hash.digest(\"hex\") };\n}\n\nexport function readFileResolution(resolution: Resolution) {\n  let path: AbsolutePath | undefined;\n  if (resolution.isFile()) {\n    if (resolution.isInput()) {\n      path = resolution.pathInInput;\n    } else {\n      path = resolution.path;\n    }\n  }\n  if (path) {\n    return readFile(path);\n  }\n}\n\nexport function stat(path: AbsolutePath): Stats | undefined {\n  try {\n    return statSync(path);\n  } catch (e) {\n    if (e.code === \"ENOENT\" || e.code === \"EACCES\") {\n      return;\n    }\n    throw e;\n  }\n}\n\nexport function readdir(\n  path: CanonicalPath,\n  resolver: PathResolver\n): DirEntries {\n  const prefix = path + \"/\";\n  const files: string[] = [];\n  const directories: string[] = [];\n  for (const entry of readdirSync(path).sort()) {\n    const resolution = resolver.resolve(prefix + entry);\n    if (resolution.isFile()) {\n      files.push(entry);\n    } else if (resolution.isDirectory()) {\n      directories.push(entry);\n    }\n  }\n  return { files, directories };\n}\n","import { readdir } from \"../fs/file-utils\";\nimport {\n  CacheDelegate,\n  CanonicalPath,\n  DirEntries,\n  PathResolver,\n} from \"../interfaces\";\n\nexport default class DirEntriesCacheDelegate\n  implements CacheDelegate<CanonicalPath, CanonicalPath, DirEntries> {\n  constructor(private resolver: PathResolver) {}\n\n  public cacheKey(path: CanonicalPath): CanonicalPath {\n    return path;\n  }\n\n  public create(path: CanonicalPath): DirEntries {\n    return readdir(path, this.resolver);\n  }\n}\n","import Cache from \"../cache\";\nimport { CanonicalPath, DirEntries, PathResolver } from \"../interfaces\";\nimport DirEntriesCacheDelegate from \"./directory-entries-cache-delegate\";\n\nexport default class DirEntriesCache extends Cache<\n  CanonicalPath,\n  CanonicalPath,\n  DirEntries\n> {\n  constructor(resolver: PathResolver) {\n    super(new DirEntriesCacheDelegate(resolver));\n  }\n}\n","import { realpathSync } from \"fs\";\nimport * as ts from \"typescript\";\nimport DirectoryEntriesCache from \"../cache/directory-entries-cache\";\nimport {\n  AbsolutePath,\n  CanonicalPath,\n  DirEntries,\n  PathResolver,\n  Resolution,\n} from \"../interfaces\";\n\nexport default class Input {\n  private entriesCache: DirectoryEntriesCache;\n  private realpathCache: { [path: string]: string } = Object.create(null);\n\n  constructor(private resolver: PathResolver) {\n    this.entriesCache = new DirectoryEntriesCache(resolver);\n  }\n\n  public fileExists(path: string) {\n    return this.resolve(path).isFile();\n  }\n\n  public directoryExists(path: string) {\n    return this.resolve(path).isDirectory();\n  }\n\n  /**\n   * Used for type resolution.\n   *\n   * Will merge the view of input path and root path.\n   */\n  public getDirectories(path: string): string[] {\n    const resolution = this.resolve(path);\n    let directories: string[];\n    if (resolution.isDirectory()) {\n      if (resolution.isInput()) {\n        directories = this.readdir(resolution.canonicalPathInInput).directories;\n        if (resolution.isMerged()) {\n          for (const other in this.readdir(resolution.canonicalPath)\n            .directories) {\n            if (directories.indexOf(other) === -1) {\n              directories.push(other);\n            }\n          }\n        }\n      } else {\n        directories = this.readdir(resolution.canonicalPath).directories;\n      }\n    } else {\n      directories = [];\n    }\n    return directories;\n  }\n\n  /**\n   * Used by config parser for matching input.\n   *\n   * Unlike getDirectories which merges the view of input node and root.\n   * We only allow this to return entries for things within the\n   * broccoli input node.\n   */\n  public getFileSystemEntries(path: string) {\n    const resolution = this.resolve(path);\n    let entries: DirEntries;\n    if (resolution.isDirectory() && resolution.isInput()) {\n      entries = this.readdir(resolution.canonicalPathInInput);\n    } else {\n      entries = { files: [], directories: [] };\n    }\n    return entries;\n  }\n\n  public readFile(path: string): string | undefined {\n    const resolution = this.resolve(path);\n    let resolved: AbsolutePath | undefined;\n    if (resolution.isFile()) {\n      if (resolution.isInput()) {\n        resolved = resolution.pathInInput;\n      } else {\n        resolved = resolution.path;\n      }\n    }\n    if (resolved !== undefined) {\n      return ts.sys.readFile(resolved);\n    }\n  }\n\n  public relativePath(path: string): string | undefined {\n    return this.resolve(path).relativePath;\n  }\n\n  public realpath(path: string): AbsolutePath | undefined {\n    const resolution = this.resolve(path);\n    if (resolution.isInput()) {\n      return resolution.path;\n    } else if (resolution.exists()) {\n      const realpath = realpathSync(resolution.path, this.realpathCache);\n      return this.resolve(realpath).path;\n    }\n  }\n\n  public reset() {\n    this.entriesCache.clear();\n    this.realpathCache = Object.create(null);\n  }\n\n  private resolve(path: string): Resolution {\n    return this.resolver.resolve(path);\n  }\n\n  private readdir(path: CanonicalPath) {\n    return this.entriesCache.get(path);\n  }\n}\n","export const FSTree: FSTree.Static = require(\"fs-tree-diff\");\nexport const BroccoliPlugin: BroccoliPlugin.Static = require(\"broccoli-plugin\");\nexport const walkSync: WalkSync = require(\"walk-sync\");\nexport const md5Hex: MD5Hex = require(\"md5-hex\");\nexport const heimdall: Heimdall = require(\"heimdalljs\");\n\ndeclare function require(id: string): any;\n\nexport interface Token {\n  __tokenBrand: any;\n}\n\nexport interface Heimdall {\n  start(name: string): Token;\n  stop(token: Token): void;\n}\n\nexport type MD5Hex = (str: string) => string;\n\nexport namespace BroccoliPlugin {\n  export interface PluginOptions {\n    name?: string;\n    annotation?: string;\n    persistentOutput?: boolean;\n  }\n\n  export interface Plugin {\n    inputPaths: string[];\n    outputPath: string;\n    cachePath: string;\n  }\n\n  export interface Static {\n    new (inputNodes: any[], options?: any): Plugin;\n  }\n}\n\nexport interface WalkSync {\n  (path: string, options?: any): string[];\n  entries(path: string, options?: any): WalkSync.Entry[];\n}\n\nexport namespace WalkSync {\n  export type Row = string | RegExp[];\n\n  export interface Entry {\n    relativePath: string;\n    basePath: string;\n    fullPath: string;\n    checksum: string;\n    mode: number;\n    size: number;\n    mtime: Date;\n    isDirectory(): boolean;\n  }\n}\n\nexport interface FSTree {\n  calculatePatch(\n    next: FSTree,\n    isUnchanged?: (a: WalkSync.Entry, b: WalkSync.Entry) => {}\n  ): FSTree.PatchOp[];\n}\n\nexport namespace FSTree {\n  export type Op = \"unlink\" | \"create\" | \"mkdir\" | \"rmdir\" | \"change\";\n\n  export type PatchOp = [Op, string, WalkSync.Entry];\n\n  export interface Static {\n    fromEntries(\n      entries: WalkSync.Entry[],\n      options?: {\n        sortAndExpand?: boolean;\n      }\n    ): FSTree;\n  }\n}\n","import * as fs from \"fs\";\nimport { FSTree, md5Hex, walkSync, WalkSync } from \"../helpers\";\n\nexport default class OutputPatcher {\n  private entries: WalkSync.Entry[] = [];\n  private contents = new Map<string, string>();\n  private lastTree: FSTree | undefined = undefined;\n  private isUnchanged: (a: Entry, b: Entry) => boolean;\n\n  constructor(private outputPath: string) {\n    this.isUnchanged = (entryA, entryB) => {\n      if (entryA.isDirectory() && entryB.isDirectory()) {\n        return true;\n      }\n      if (entryA.mode === entryB.mode && entryA.checksum === entryB.checksum) {\n        return true;\n      }\n      return false;\n    };\n  }\n\n  // relativePath should be without leading '/' and use forward slashes\n  public add(relativePath: string, content: string): void {\n    this.entries.push(\n      new Entry(this.outputPath, relativePath, md5Hex(content))\n    );\n    this.contents.set(relativePath, content);\n  }\n\n  public patch() {\n    try {\n      this.lastTree = this._patch();\n    } catch (e) {\n      // walkSync(output);\n      this.lastTree = undefined;\n      throw e;\n    } finally {\n      this.entries = [];\n      this.contents = new Map<string, string>();\n    }\n  }\n\n  private _patch() {\n    const entries = this.entries;\n    let lastTree = this.lastTree;\n    const isUnchanged = this.isUnchanged;\n    const outputPath = this.outputPath;\n    const contents = this.contents;\n    const nextTree = FSTree.fromEntries(entries, { sortAndExpand: true });\n    if (!lastTree) {\n      lastTree = FSTree.fromEntries(walkSync.entries(outputPath));\n    }\n    const patch = lastTree.calculatePatch(nextTree, isUnchanged);\n    patch.forEach(change => {\n      const op = change[0];\n      const path = change[1];\n      const entry = change[2];\n      switch (op) {\n        case \"mkdir\":\n          // the expanded dirs don't have a base\n          fs.mkdirSync(outputPath + \"/\" + path);\n          break;\n        case \"rmdir\":\n          // the expanded dirs don't have a base\n          fs.rmdirSync(outputPath + \"/\" + path);\n          break;\n        case \"unlink\":\n          fs.unlinkSync(entry.fullPath);\n          break;\n        case \"create\":\n        case \"change\":\n          fs.writeFileSync(entry.fullPath, contents.get(path));\n          break;\n        default:\n          throw new Error(`unrecognized case ${op}`);\n      }\n    });\n    return nextTree;\n  }\n}\n\n/* tslint:disable:max-classes-per-file */\nclass Entry implements WalkSync.Entry {\n  public fullPath: string;\n  public mode: number = 0;\n  public size: number = 0;\n  public mtime: Date = new Date();\n\n  constructor(\n    public basePath: string,\n    public relativePath: string,\n    public checksum: string\n  ) {\n    this.fullPath = basePath + \"/\" + relativePath;\n    this.checksum = checksum;\n  }\n\n  public isDirectory() {\n    return false;\n  }\n}\n","import { AbsolutePath, PathInfo } from \"../interfaces\";\nimport {\n  relativePathWithin,\n  toAbsolutePath,\n  toCanonicalPath,\n} from \"./path-utils\";\n\nexport default function parsePath(\n  rootPath: AbsolutePath,\n  inputPath: AbsolutePath,\n  rawPath: string\n): PathInfo {\n  let path = toAbsolutePath(rawPath, rootPath);\n  let pathInInput: AbsolutePath | undefined;\n  let relativePath = relativePathWithin(rootPath, path);\n  if (relativePath === undefined) {\n    relativePath = relativePathWithin(inputPath, path);\n    if (relativePath !== undefined) {\n      pathInInput = path;\n      path = toAbsolutePath(relativePath, rootPath);\n    }\n  } else {\n    pathInInput = toAbsolutePath(relativePath, inputPath);\n  }\n\n  const canonicalPath = toCanonicalPath(path);\n  const canonicalPathInInput = pathInInput && toCanonicalPath(pathInInput);\n\n  return {\n    canonicalPath,\n    canonicalPathInInput,\n    path,\n    pathInInput,\n    relativePath,\n  };\n}\n","import parsePath from \"../fs/parse-path\";\nimport { toCanonicalPath } from \"../fs/path-utils\";\nimport {\n  AbsolutePath,\n  CacheDelegate,\n  CanonicalPath,\n  PathInfo,\n} from \"../interfaces\";\n\nexport default class PathInfoCacheDelegate\n  implements CacheDelegate<string, CanonicalPath, PathInfo> {\n  constructor(\n    private rootPath: AbsolutePath,\n    private inputPath: AbsolutePath\n  ) {}\n\n  public cacheKey(key: string): CanonicalPath {\n    return toCanonicalPath(key, this.rootPath);\n  }\n\n  public create(key: string) {\n    return parsePath(this.rootPath, this.inputPath, key);\n  }\n}\n","import Cache from \"../cache\";\nimport { AbsolutePath, CanonicalPath, PathInfo } from \"../interfaces\";\nimport PathInfoCacheDelegate from \"./path-info-cache-delegate\";\n\nexport default class PathInfoCache extends Cache<\n  string,\n  CanonicalPath,\n  PathInfo\n> {\n  constructor(rootPath: AbsolutePath, inputPath: AbsolutePath) {\n    super(new PathInfoCacheDelegate(rootPath, inputPath));\n  }\n}\n","import { Stats } from \"fs\";\nimport {\n  AbsolutePath,\n  CanonicalPath,\n  DirectoryResolution,\n  FileResolution,\n  InputDirectoryResolution,\n  InputFileResolution,\n  MergedDirectoryResolution,\n  PathInfo,\n  Resolution,\n} from \"../interfaces\";\nimport { stat } from \"./file-utils\";\n\nexport default function resolve(pathInfo: PathInfo): Resolution {\n  let flags = ResolutionFlags.None;\n  let stats: Stats | undefined;\n  let otherStats: Stats | undefined;\n  if (pathInfo.pathInInput) {\n    stats = stat(pathInfo.pathInInput);\n    if (stats !== undefined) {\n      flags |= ResolutionFlags.Input;\n    }\n  }\n  if (stats === undefined) {\n    stats = stat(pathInfo.path);\n  }\n  if (stats !== undefined) {\n    flags |= stats.isDirectory() ? ResolutionFlags.Dir : ResolutionFlags.File;\n  }\n  if ((flags & ResolutionFlags.InputDir) === ResolutionFlags.InputDir) {\n    otherStats = stat(pathInfo.path);\n    if (otherStats !== undefined && otherStats.isDirectory()) {\n      flags |= ResolutionFlags.Merge;\n    }\n  }\n  return new ResolutionImpl(pathInfo, stats, otherStats, flags);\n}\n\nconst enum ResolutionFlags {\n  None = 0,\n  File = 1 << 0,\n  Dir = 1 << 1,\n  Input = 1 << 2,\n  Merge = 1 << 3,\n  InputDir = Dir | Input,\n}\n\nclass ResolutionImpl implements Resolution {\n  public canonicalPath: CanonicalPath;\n  public canonicalPathInInput: CanonicalPath | undefined;\n  public path: AbsolutePath;\n  public pathInInput: AbsolutePath | undefined;\n  public relativePath: string | undefined;\n\n  constructor(\n    pathInfo: PathInfo,\n    public stats: Stats | undefined,\n    public otherStats: Stats | undefined,\n    private flags: ResolutionFlags\n  ) {\n    this.canonicalPath = pathInfo.canonicalPath;\n    this.canonicalPathInInput = pathInfo.canonicalPathInInput;\n    this.path = pathInfo.path;\n    this.pathInInput = pathInfo.pathInInput;\n    this.relativePath = pathInfo.relativePath;\n  }\n\n  public isInput(): this is InputDirectoryResolution | InputFileResolution {\n    return this.hasFlag(ResolutionFlags.Input);\n  }\n\n  public isFile(): this is FileResolution | InputFileResolution {\n    return this.hasFlag(ResolutionFlags.File);\n  }\n\n  public isDirectory(): this is DirectoryResolution | InputDirectoryResolution {\n    return this.hasFlag(ResolutionFlags.Dir);\n  }\n\n  public isMerged(): this is MergedDirectoryResolution {\n    return this.hasFlag(ResolutionFlags.File);\n  }\n\n  public exists(): this is FileResolution | DirectoryResolution {\n    return this.stats !== undefined;\n  }\n\n  private hasFlag(flag: ResolutionFlags) {\n    return (this.flags & flag) === flag;\n  }\n}\n","import resolve from \"../fs/resolve\";\nimport {\n  CacheDelegate,\n  CanonicalPath,\n  PathInfo,\n  Resolution,\n} from \"../interfaces\";\n\nexport default class ResolutionCacheDelegate\n  implements CacheDelegate<PathInfo, CanonicalPath, Resolution> {\n  public cacheKey(pathInfo: PathInfo): CanonicalPath {\n    return pathInfo.canonicalPath;\n  }\n\n  public create(pathInfo: PathInfo) {\n    return resolve(pathInfo);\n  }\n}\n","import Cache from \"../cache\";\nimport { CanonicalPath, PathInfo, Resolution } from \"../interfaces\";\nimport ResolutionCacheDelegate from \"./resolution-cache-delegate\";\n\nexport default class ResolutionCache extends Cache<\n  PathInfo,\n  CanonicalPath,\n  Resolution\n> {\n  constructor() {\n    super(new ResolutionCacheDelegate());\n  }\n}\n","import PathInfoCache from \"../cache/path-info-cache\";\nimport ResolutionCache from \"../cache/resolution-cache\";\nimport { AbsolutePath, PathResolver, Resolution } from \"../interfaces\";\n\nexport default class PathResolverImpl implements PathResolver {\n  private pathInfoCache: PathInfoCache;\n  private resolutionCache = new ResolutionCache();\n\n  constructor(rootPath: AbsolutePath, inputPath: AbsolutePath) {\n    this.pathInfoCache = new PathInfoCache(rootPath, inputPath);\n  }\n\n  public resolve(path: string): Resolution {\n    const pathInfo = this.pathInfoCache.get(path);\n    return this.resolutionCache.get(pathInfo);\n  }\n\n  public reset() {\n    // PathInfo cache is not build specific\n    // resolutions are\n    this.resolutionCache.clear();\n  }\n}\n","import * as ts from \"typescript\";\nimport { readFileResolution } from \"../fs/file-utils\";\nimport {\n  CanonicalPath,\n  FileContent,\n  PathResolver,\n  Resolution,\n} from \"../interfaces\";\n\nconst SharedRegistry = ts.createDocumentRegistry();\n\ninterface VersionedSourceFile {\n  sourceFile: ts.SourceFile;\n  version: string;\n}\n\nexport default class SourceCache {\n  private bucketKey: ts.DocumentRegistryBucketKey;\n\n  private sourceFiles = new Map<CanonicalPath, VersionedSourceFile>();\n\n  constructor(\n    private resolver: PathResolver,\n    private options: ts.CompilerOptions\n  ) {\n    this.bucketKey = SharedRegistry.getKeyForCompilationSettings(options);\n  }\n\n  public updateOptions(options: ts.CompilerOptions) {\n    const bucketKey = SharedRegistry.getKeyForCompilationSettings(options);\n    this.options = options;\n    if (this.bucketKey !== bucketKey) {\n      this.releaseAll();\n      this.bucketKey = bucketKey;\n    }\n  }\n\n  public getSourceFile(fileName: string): ts.SourceFile | undefined {\n    const resolution = this.resolve(fileName);\n    return this.getSourceFileByPath(fileName, resolution.canonicalPath);\n  }\n\n  public getSourceFileByPath(\n    fileName: string,\n    path: CanonicalPath\n  ): ts.SourceFile | undefined {\n    const resolution = this.resolve(path);\n    return this.getSourceFileByResolution(resolution, fileName, path);\n  }\n\n  public releaseUnusedSourceFiles(program: ts.Program) {\n    const bucketKey = this.bucketKey;\n    for (const path of this.sourceFiles.keys()) {\n      if (program.getSourceFileByPath(path) === undefined) {\n        SharedRegistry.releaseDocumentWithKey(path, bucketKey);\n      }\n    }\n  }\n\n  public releaseAll() {\n    const { bucketKey } = this;\n    const paths = this.sourceFiles.keys();\n    for (const path of paths) {\n      SharedRegistry.releaseDocumentWithKey(path, bucketKey);\n    }\n    this.sourceFiles.clear();\n  }\n\n  private resolve(fileName: string) {\n    return this.resolver.resolve(fileName);\n  }\n\n  private getSourceFileByResolution(\n    resolution: Resolution,\n    fileName: string,\n    path: CanonicalPath\n  ): ts.SourceFile | undefined {\n    const content = readFileResolution(resolution);\n    if (content) {\n      return this.getOrUpdateSourceFile(fileName, path, content);\n    }\n  }\n\n  private getOrUpdateSourceFile(\n    fileName: string,\n    path: CanonicalPath,\n    content: FileContent\n  ) {\n    const existing = this.sourceFiles.get(path);\n    if (existing) {\n      return this.updateSourceFile(existing, fileName, path, content);\n    } else {\n      return this.createSourceFile(fileName, path, content);\n    }\n  }\n\n  private updateSourceFile(\n    existing: VersionedSourceFile,\n    fileName: string,\n    path: CanonicalPath,\n    content: FileContent\n  ) {\n    const { version } = content;\n    if (existing.version === version) {\n      return existing.sourceFile;\n    }\n    const { options, bucketKey } = this;\n    const sourceFile = SharedRegistry.updateDocumentWithKey(\n      fileName,\n      path,\n      options,\n      bucketKey,\n      snapshot(content.buffer),\n      version\n    );\n    existing.sourceFile = sourceFile;\n    existing.version = version;\n    return sourceFile;\n  }\n\n  private createSourceFile(\n    fileName: string,\n    path: CanonicalPath,\n    content: FileContent\n  ) {\n    const { options, bucketKey, sourceFiles } = this;\n    const { buffer, version } = content;\n    const sourceFile = SharedRegistry.acquireDocumentWithKey(\n      fileName,\n      path,\n      options,\n      bucketKey,\n      snapshot(buffer),\n      version\n    );\n    sourceFiles.set(path, { sourceFile, version });\n    return sourceFile;\n  }\n}\n\nfunction snapshot(buffer: Buffer) {\n  return ts.ScriptSnapshot.fromString(buffer.toString(\"utf8\"));\n}\n","import * as ts from \"typescript\";\nimport ConfigParser from \"./compiler/config-parser\";\nimport createCompilerHost from \"./compiler/create-compiler-host\";\nimport Input from \"./compiler/input-io\";\nimport OutputPatcher from \"./compiler/output-patcher\";\nimport PathResolver from \"./compiler/path-resolver\";\nimport SourceCache from \"./compiler/source-cache\";\nimport {\n  normalizePath,\n  relativePathWithin,\n  toAbsolutePath,\n} from \"./fs/path-utils\";\nimport { heimdall } from \"./helpers\";\nimport {\n  AbsolutePath,\n  DiagnosticsHandler,\n  NormalizedOptions,\n} from \"./interfaces\";\n\nexport default class Compiler {\n  private resolver: PathResolver;\n  private workingPath: AbsolutePath;\n  private rootPath: AbsolutePath;\n  private buildPath: AbsolutePath | undefined;\n  private input: Input;\n  private configParser: ConfigParser;\n  private sourceCache: SourceCache | undefined;\n  private output: OutputPatcher;\n  private program: ts.Program | undefined;\n\n  constructor(\n    public inputPath: AbsolutePath,\n    public outputPath: AbsolutePath,\n    public options: NormalizedOptions,\n    private diagnosticsHandler: DiagnosticsHandler\n  ) {\n    const workingPath = (this.workingPath = options.workingPath);\n    const rootPath = (this.rootPath = options.rootPath);\n    this.buildPath = options.buildPath;\n    const resolver = (this.resolver = new PathResolver(rootPath, inputPath));\n    const input = (this.input = new Input(resolver));\n    this.configParser = new ConfigParser(\n      options.projectPath,\n      options.rawConfig,\n      options.configFileName,\n      options.compilerOptions,\n      workingPath,\n      input\n    );\n    this.output = new OutputPatcher(outputPath);\n  }\n\n  public compile() {\n    const config = this.parseConfig();\n\n    const sourceCache = this.getSourceCache(config.options);\n\n    const program = this.createProgram(config, sourceCache);\n\n    this.emitDiagnostics(program);\n\n    sourceCache.releaseUnusedSourceFiles(program);\n\n    this.emitProgram(program, this.resolveBuildPath(config.options));\n\n    this.patchOutput();\n\n    this.resetCaches();\n  }\n\n  protected parseConfig() {\n    const token = heimdall.start(\"TypeScript:parseConfig\");\n    const config = this.configParser.parseConfig();\n    heimdall.stop(token);\n    return config;\n  }\n\n  protected getSourceCache(options: ts.CompilerOptions) {\n    let sourceCache = this.sourceCache;\n    if (sourceCache === undefined) {\n      sourceCache = this.sourceCache = new SourceCache(this.resolver, options);\n    } else {\n      sourceCache.updateOptions(options);\n    }\n    return sourceCache;\n  }\n\n  protected createProgram(\n    config: ts.ParsedCommandLine,\n    sourceCache: SourceCache\n  ): ts.Program {\n    const token = heimdall.start(\"TypeScript:createProgram\");\n\n    const host = createCompilerHost(\n      this.workingPath,\n      this.input,\n      sourceCache,\n      config.options\n    );\n\n    const oldProgram = this.program;\n    const program = ts.createProgram(\n      config.fileNames,\n      config.options,\n      host,\n      oldProgram\n    );\n    this.program = program;\n\n    heimdall.stop(token);\n    return program;\n  }\n\n  protected emitDiagnostics(program: ts.Program) {\n    // this is where bindings are resolved and typechecking is done\n    const token = heimdall.start(\"TypeScript:emitDiagnostics\");\n    const diagnostics = ts.getPreEmitDiagnostics(program);\n    heimdall.stop(token);\n    this.diagnosticsHandler.check(diagnostics);\n  }\n\n  protected resolveBuildPath(options: ts.CompilerOptions): AbsolutePath {\n    if (this.buildPath !== undefined) {\n      return this.buildPath;\n    }\n    if (options.outDir !== undefined) {\n      return normalizePath(options.outDir) as AbsolutePath;\n    }\n    return this.rootPath;\n  }\n\n  protected emitProgram(program: ts.Program, buildPath: AbsolutePath) {\n    const token = heimdall.start(\"TypeScript:emitProgram\");\n    const { output } = this;\n\n    const emitResult = program.emit(\n      undefined,\n      (fileName: string, data: string) => {\n        /* tslint:disable:no-console */\n        // the fileName is absolute but not normalized if outDir is not normalized\n        const relativePath = relativePathWithin(\n          buildPath,\n          toAbsolutePath(fileName, this.workingPath)\n        );\n        if (relativePath) {\n          output.add(relativePath, data);\n        }\n      }\n    );\n    heimdall.stop(token);\n    this.diagnosticsHandler.check(emitResult.diagnostics);\n  }\n\n  protected patchOutput() {\n    const token = heimdall.start(\"TypeScript:patchOutput\");\n    this.output.patch();\n    heimdall.stop(token);\n  }\n\n  protected resetCaches() {\n    this.resolver.reset();\n    this.input.reset();\n  }\n}\n","import {\n  Diagnostic,\n  formatDiagnostics,\n  FormatDiagnosticsHost,\n  sys,\n} from \"typescript\";\nimport { getCanonicalFileName } from \"./fs/path-utils\";\nimport {\n  AbsolutePath,\n  DiagnosticsHandler,\n  NormalizedOptions,\n} from \"./interfaces\";\n\nexport default class DiagnosticsHandlerImpl implements DiagnosticsHandler {\n  private throwOnError: boolean;\n  private host: FormatDiagnosticsHost;\n  private write = sys.write;\n\n  constructor(options: NormalizedOptions) {\n    this.throwOnError = options.throwOnError;\n    this.host = createFormatDiagnosticsHost(options.workingPath);\n  }\n\n  public setWrite(write: (s: string) => void) {\n    this.write = write;\n  }\n\n  public check(\n    diagnostics: Diagnostic | Diagnostic[] | undefined,\n    throwOnError?: boolean\n  ): boolean {\n    const normalized = normalize(diagnostics);\n    if (normalized === undefined) {\n      return false;\n    }\n    const message = this.format(normalized);\n    if (this.throwOnError || throwOnError === true) {\n      throw new Error(message);\n    }\n    this.write(message);\n    return true;\n  }\n\n  public format(diagnostics: Diagnostic[]) {\n    return formatDiagnostics(diagnostics, this.host);\n  }\n}\n\nfunction normalize(\n  diagnostics: Diagnostic | Diagnostic[] | undefined\n): Diagnostic[] | undefined {\n  if (diagnostics === undefined) {\n    return undefined;\n  }\n  if (Array.isArray(diagnostics)) {\n    return diagnostics.length === 0 ? undefined : diagnostics;\n  }\n  return [diagnostics];\n}\n\nfunction createFormatDiagnosticsHost(\n  rootPath: AbsolutePath\n): FormatDiagnosticsHost {\n  const newLine = sys.newLine;\n\n  return {\n    getCanonicalFileName,\n    getCurrentDirectory: () => rootPath,\n    getNewLine: () => newLine,\n  };\n}\n","import { isWithin, normalizePath, toAbsolutePath } from \"./fs/path-utils\";\nimport {\n  CompilerOptionsConfig,\n  NormalizedOptions,\n  TypescriptCompilerOptions,\n} from \"./interfaces\";\n\nexport default function normalizeOptions(\n  options: TypescriptCompilerOptions\n): NormalizedOptions {\n  const workingPath = toAbsolutePath(\n    options.workingPath === undefined ? process.cwd() : options.workingPath\n  );\n  const rootPath =\n    options.rootPath === undefined\n      ? workingPath\n      : toAbsolutePath(options.rootPath, workingPath);\n  const projectPath =\n    options.projectPath === undefined\n      ? rootPath\n      : toAbsolutePath(options.projectPath, workingPath);\n  const buildPath =\n    options.buildPath === undefined\n      ? undefined\n      : toAbsolutePath(options.buildPath, workingPath);\n  const tsconfig = options.tsconfig;\n\n  if (\n    buildPath !== undefined &&\n    !(rootPath === buildPath || isWithin(rootPath, buildPath))\n  ) {\n    throw new Error(\n      `buildPath \"${buildPath}\" must be at or within rootPath \"${rootPath}\"`\n    );\n  }\n\n  let configFileName: string | undefined;\n  let rawConfig: CompilerOptionsConfig | undefined;\n  if (typeof tsconfig === \"object\") {\n    configFileName = undefined;\n    rawConfig = tsconfig;\n  } else if (tsconfig) {\n    configFileName = normalizePath(tsconfig);\n    rawConfig = undefined;\n  }\n\n  let throwOnError = options.throwOnError;\n  if (throwOnError === undefined) {\n    throwOnError = process.env.NODE_ENV === \"production\";\n  }\n\n  return {\n    buildPath,\n    compilerOptions: options.compilerOptions,\n    configFileName,\n    projectPath,\n    rawConfig,\n    rootPath,\n    throwOnError,\n    workingPath,\n  };\n}\n","import Compiler from \"./compiler\";\nimport DiagnosticsHandler from \"./diagnostics-handler\";\nimport { toAbsolutePath } from \"./fs/path-utils\";\nimport { BroccoliPlugin, heimdall } from \"./helpers\";\nimport { NormalizedOptions, TypescriptCompilerOptions } from \"./interfaces\";\nimport normalizeOptions from \"./normalize-options\";\n\n/**\n * Returns a Broccoli plugin instance that compiles\n * the files in the tsconfig.\n *\n * It is rooted to the inputNode's outputPath, all\n * files it imports must be resolvable from its input\n * except for the default library file.\n *\n * Errors are logged and it will try to emit whatever\n * it could successfully compile.\n *\n * It will only emit based on the root source files\n * you give it, by default it will look for all .ts\n * files, but if you specify a files or filesGlob\n * it will these as entry points and only compile\n * the files and files they reference from the input.\n */\nexport function typescript(\n  inputNode: any,\n  options?: TypescriptCompilerOptions\n) {\n  return new TypescriptCompiler(inputNode, options);\n}\n\n/**\n * TypeScript Broccoli plugin class.\n */\nexport class TypescriptCompiler extends BroccoliPlugin {\n  private compiler: Compiler | undefined;\n  private diagnosticHandler: DiagnosticsHandler;\n  private options: NormalizedOptions;\n\n  constructor(inputNode: any, options?: TypescriptCompilerOptions) {\n    super([inputNode], {\n      annotation: options && options.annotation,\n      name: \"broccoli-typescript-compiler\",\n      persistentOutput: true,\n    });\n    const normalizedOptions = normalizeOptions(options || {});\n    this.options = normalizedOptions;\n    this.diagnosticHandler = new DiagnosticsHandler(normalizedOptions);\n  }\n\n  public build() {\n    const token = heimdall.start(\"TypeScript:compile\");\n    let compiler = this.compiler;\n    if (!compiler) {\n      compiler = this.compiler = new Compiler(\n        toAbsolutePath(this.inputPaths[0]),\n        toAbsolutePath(this.outputPath),\n        this.options,\n        this.diagnosticHandler\n      );\n    }\n    compiler.compile();\n    heimdall.stop(token);\n  }\n\n  public setDiagnosticWriter(write: (message: string) => void) {\n    this.diagnosticHandler.setWrite(write);\n  }\n}\n","import { TypescriptCompilerOptions } from \"../interfaces\";\nimport { TypescriptCompiler } from \"../plugin\";\n\nconst Funnel: any = require(\"broccoli-funnel\");\nconst MergeTrees: any = require(\"broccoli-merge-trees\");\n\n/**\n * Backwards compat filter behavior.\n *\n * Preserves the filter aspect of compiling only .ts\n * and passing through all other files.\n */\nexport default function filterLike(\n  inputNode: any,\n  options?: TypescriptCompilerOptions\n) {\n  const passthrough = new Funnel(inputNode, {\n    annotation: \"TypeScript passthrough\",\n    exclude: [\"**/*.ts\"],\n  });\n  const filter = new Funnel(inputNode, {\n    annotation: \"TypeScript input\",\n    include: [\"**/*.ts\"],\n  });\n  return new MergeTrees(\n    [passthrough, new TypescriptCompiler(filter, options)],\n    {\n      annotation: \"TypeScript passthrough + output\",\n      overwrite: true,\n    }\n  );\n}\n"],"names":["const","ts.sys","ts.getDirectoryPath","ts.normalizePath","let","ts.toPath","matchFiles","ts.findConfigFile","getDirectoryPath","ts.convertCompilerOptionsFromJson","ts.parseJsonText","ts.parseJsonConfigFileContent","ts.parseJsonSourceFileConfigFileContent","getDefaultLibFileName","sys","NewLineKind","readFileSync","createHash","statSync","readdirSync","super","DirectoryEntriesCache","this","realpathSync","ts.createDocumentRegistry","ts.ScriptSnapshot","PathResolver","ts.createProgram","ts.getPreEmitDiagnostics","formatDiagnostics","DiagnosticsHandler"],"mappings":"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"}